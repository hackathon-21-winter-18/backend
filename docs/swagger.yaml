openapi: 3.0.0
info:
  title: 21hack18 API
  description: winter hackathon
  version: 1.0.0
servers:
  - url: http://localhost:3000/api

tags:
  - name: oauth
  - name: palaces
  - name: templates
  - name: notices
  - name: user
paths:
  # /oauth/signup:
  #   post:
  #     tags:
  #       - oauth
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/LoginRequest"
  #     responses:
  #       200:
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/LoginResponse"
  #       400:
  #         description: 不正なリクエスト
  # /oauth/login:
  #   post:
  #     tags:
  #       - oauth
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/LoginRequest"
  #     responses:
  #       200:
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/LoginResponse"
  #       400:
  #         description: 不正なリクエスト
  #       403:
  #         description: パスワードが不一致
  #       404:
  #         description: ユーザーが見つからない
  # /oauth/genpkce:
  #   get:
  #     tags: 
  #       - oauth
  #     responses:
  #       200:
  #         description: OK
  /oauth/login/:
    get:
      tags:
        - oauth
      responses:
        200:
          description: OK


  /oauth/logout:
    post:
      tags:
        - oauth
      responses:
        200:
          description: OK
  /oauth/whoamI:
    get:
      tags:
        - oauth
      summary: 自分のユーザーIDとユーザー名を取得
      responses:
        200: 
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Me"
        404:
          description: sessionが見つからない
  /palaces:
    get:
      tags:
        - palaces
      parameters:
        - $ref: "#/components/parameters/sortQuery"
        - $ref: "#/components/parameters/maxPins"
        - $ref: "#/components/parameters/minPins"
      summary: 公開されているpalaceの一覧を取得
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/SharedPalaces"
        # 400:
        #   description: 不正なリクエスト
  /palaces/me:
    get:
      tags:
        - palaces
      parameters:
        - $ref: "#/components/parameters/sortQueryMe"
        - $ref: "#/components/parameters/maxPins"
        - $ref: "#/components/parameters/minPins"
      summary: 自分のpalaceの一覧を取得
      responses:
        200: 
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Palaces"
        400:
          description: 不正なリクエスト
    post:
      tags:
        - palaces
      summary: palaceを作成
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostPalace"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ID"

        400:
          description: 不正なリクエスト
  /palaces/{palaceID}:
    get: 
      tags:
        - palaces
      summary: 特定のpalaceを取得
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Palace"
    put:
      tags: 
        - palaces
      summary: 特定のpalaceを修正
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutPalace"
      responses:
        200:
          description: OK
    delete:
      tags:
        - palaces
      summary: 特定のpalaceを削除
      responses:
        200:
          description: OK
  /palaces/share/{palaceID}:
    put:
      tags: 
        - palaces
      summary: 公開非公開を設定
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Share"
      responses:
        200:
          description: OK
  /templates:
    get:
      tags:
        - templates
      parameters:
        - $ref: "#/components/parameters/sortQuery"
        - $ref: "#/components/parameters/maxPins"
        - $ref: "#/components/parameters/minPins"
      summary: 公開されているtemplateの一覧を取得
      responses:
        200:
          description: OK
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/SharedTemplates"
  /templates/me:
    get:
      tags:
        - templates
      parameters:
        - $ref: "#/components/parameters/sortQueryMe"
        - $ref: "#/components/parameters/maxPins"
        - $ref: "#/components/parameters/minPins"
      summary: 自分が保持しているtemplateを取得
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Templates"
    post:
      tags:
        - templates
      summary: のtemplateを作成
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostTemplate"
      responses: 
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ID"
  /templates/{templateID}:
    get:
      tags:
        - templates
      summary: 特定のtemplateを取得(いらなそう)
      responses:
        200: 
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
    put:
      tags:
        - templates
      summary: 特定のtemplateを修正
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PutTemplate"
      responses:
        200:
          description: OK
    delete:
      tags:
        - templates
      summary: 特定のtemplateを削除
      responses:
        200: 
          description: OK
  /templates/share/{templateID}:
    put:
      tags: 
        - templates
      summary: 公開非公開を設定
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Share"
      responses:
        200:
          description: OK
  /notices:
    get:
      tags:
        - notices
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notices"
  /user/name:
    put:
      tags:
        - user
      requestBody: 
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/putUserRequest"
      responses:
        200:
          description: OK
components:
  parameters:
    sortQuery:
      name: sort
      description: 並び順 (最初の公開日時が新しい "first_shared_at", 公開日時が新しい "shared_at", 保存したユーザーが多い順 "savedcount")
      required: false
      in: query
      schema:
        type: string
    sortQueryMe:
      name: sort
      description: 並び順 (更新日時が新しい "updated_at", 更新日時が古い "-updated_at")
      required: false
      in: query
      schema:
        type: string
    maxPins:
      name: maxpins
      description: ピンの数の最大値
      required: false
      in: query
      schema:
        type: string
    minPins:
      name: minpins
      description: ピンの数の最小値
      required: false
      in: query
      schema:
        type: string
  schemas:
    LoginRequest:
      type: object
      properties: 
        name: 
          type: string
          description: ユーザー名
        password:
          type: string
      required:
      - name
      - password
    LoginResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      description: ログインしたらフロントでuserIDはポスト用に保持、名前は表示するから必要
    Me:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        unreadNotices:
          type: integer
    Palaces:
      type: array
      items:
        $ref: "#/components/schemas/Palace"
      description: ホーム画面で必要
    Palace:
      type: object
      description: 自分の単語が埋め込まれたpalaceの情報。
      properties:
        id:
          type: string
          format: uuid
          description: そのままPUTするときにid必要
        name:
          type: string
        image: 
          type: string
          format: base64
        embededPins:
          type: array
          items:
            $ref: "#/components/schemas/EmbededPin"
        share: 
          type: boolean
        savedCount:
          type: integer
        createdBy:
          type: string
          format: uuid
    EmbededPin:
      type: object
      description: 単語とピンのペア
      properties: 
        number:
          type: integer
          description: 整数を表示しないとしても設定
        x:   
          type: number
        y:
          type: number
        word:
          type: string
        place: 
          type: string
        situation: 
          type: string
    Templates:
      type: array
      items:
        $ref: "#/components/schemas/Template"
    Template:
      type: object
      description: 単語を含まない記憶の宮殿
      properties:
        id: 
          type: string
          format: uuid
        name: 
          type: string
        image:
          type: string
          format: base64
        pins: 
          type: array
          items:
            $ref: "#/components/schemas/Pin"
          description: ピンの配列
        share: 
          type: boolean
        savedCount:
          type: integer
        createdBy:
          type: string
          format: uuid
      required:
        - id
        - name
        - createdBy
    Pin:
      type: object
      properties:
        number:
          type: integer
          description: orderするのに必要
        x:
          type: number
        y:
          type: number
      description: 単語なしのピン
    PostTemplate:
      type: object
      properties:
        name: 
          type: string
        image:
          type: string
          format: base644
        pins: 
          type: array
          items:
            $ref: "#/components/schemas/Pin"
          description: ピンの配列
        # memo:
        #   type: string
        createdBy:
          type: string
          format: uuid
        originalID:
          type: string
          format: uuid
          description: 公開されてるものに対してのみ必要だから任意
      required:
        - id
        - name
        - createdBy
    PutTemplate:
      type: object
      properties:
        name: 
          type: string
        image:
          type: string
          format: base644
        pins: 
          type: array
          items:
            $ref: "#/components/schemas/Pin"
          description: ピンの配列
    PostPalace:
      type: object
      properties:
        name:
          type: string
        image: 
          type: string
          format: base64
        embededPins:
          type: array
          items:
            $ref: "#/components/schemas/EmbededPin"
        createdBy:
          type: string
          format: uuid
        originalID:
          type: string
          format: uuid
          description: 公開されてるものに対してのみ必要だから任意
    PutPalace:
      type: object
      properties:
        name:
          type: string
        image: 
          type: string
          format: base64
        embededPins:
          type: array
          items:
            $ref: "#/components/schemas/EmbededPin"
    Share:
      type: object
      properties:
        share:
          type: boolean
        createdBy:
          type: string
          format: uuid
    SharedPalaces:
      type: array
      items:
        $ref: "#/components/schemas/SharedPalace"
      description: ホーム画面で必要
    SharedPalace:
      type: object
      description: 自分の単語が埋め込まれたpalaceの情報。
      properties:
        id:
          type: string
          format: uuid
          description: そのままPUTするときにid必要
        name:
          type: string
        image: 
          type: string
          format: base64
        embededPins:
          type: array
          items:
            $ref: "#/components/schemas/EmbededPin"
        savedCount:
          type: integer
          description: 保存しているユーザー数
        editorName:
          type: string
          description: 編集者の名前。実際はheldByの名前
        creatorName:
          type: string
          description: 作成者のユーザー名
        heldBy:
          type: string
          format: uuid
          description: editorのIDともいう
        createdBy:
          type: string
          format: uuid
    SharedTemplates:
      type: array
      items:
        $ref: "#/components/schemas/SharedTemplate"
      description: ホーム画面で必要
    SharedTemplate:
      type: object
      description: 自分の単語が埋め込まれたpalaceの情報。
      properties:
        id:
          type: string
          format: uuid
          description: そのままPUTするときにid必要
        name:
          type: string
        image: 
          type: string
          format: base64
        embededPins:
          type: array
          items:
            $ref: "#/components/schemas/Pin"
        savedCount:
          type: integer
          description: 保存しているユーザー数
        editorName:
          type: string
          description: 編集者の名前。実際はheldByの名前
        creatorName:
          type: string
          description: 作成者のユーザー名
        heldBy:
          type: string
          format: uuid
          description: editorのIDともいう
        createdBy:
          type: string
          format: uuid
    ID: 
      type: object
      properties:
        id: 
          type: string
          format: uuid
    Notices:
      type: array
      items:
        $ref: "#/components/schemas/Notice"
    Notice:
      type: object
      properties:
        id: 
          type: string
          format: uuid
        checked:
          type: boolean
          description: 未読か既読か
        content:
          type: string
        created_at:
          type: string
          format: date-time
        palaceID: 
          type: string
          format: uuid
        templateID:
          type: string
          format: uuid
    putUserRequest:
      type: object
      properties:
        name:
          type: string